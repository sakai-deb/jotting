クイックソート
======================

:date: 2012/10/17

.. contents:: 目次
      :local:
      :depth: 2
      :backlinks: top


0. 問題
---------

リスト [3, 2, 5, 4, 1] の要素を並べ替えて、[1, 2, 3, 4, 5] にする、効率の良い手順を考えましょう。

並べ替えをする際にに許される操作は、

::

   1. 要素をリストのどこかに挿入する
   2. 2つの要素を比較する
   3. 2つの要素を入れ替える


ということにしましょう


1. 素朴な方法
----------------

先頭から順番に隣の要素と比較して、大きい要素を後ろに持っていってみます。

1-1. やってみる
---------------------

[3, 2, 5, 4, 1] に対して、

| a. 先頭 の 3, 2 を比較して、3 の方が大きいので、入れ替える -> [2, 3, 5, 4, 1]
| b. 2番目の 3, 5 を比較して、3 の方が小さいので、そのまま   -> [2, 3, 5, 4, 1]
| c. 3番目の 5, 4 を比較して、5 の方が大きいので、入れ替える -> [2, 3, 4, 5, 1]
| d. 4番目の 5, 1 を比較して、5 の方が大きいので、入れ替える -> [2, 3, 4, 1, 5]

ここまでで、最も大きい要素である、5 が最後尾に来ました。
同じようにして、もう1度同じ操作を行えば、4 が後ろから2番目に来ます。実際、

| a. 先頭 の 2, 3 を比較して、2 の方が小さいので、そのまま   -> [2, 3, 4, 1, 5]
| b. 2番目の 3, 4 を比較して、3 の方が小さいので、そのまま   -> [2, 3, 4, 1, 5]
| c. 3番目の 4, 1 を比較して、4 の方が大きいので、入れ替える -> [2, 3, 1, 4, 5]
| d. 4番目の 4, 5 を比較して、4 の方が小さいので、そのまま   -> [2, 3, 1, 4, 5]

となります。
さらにもう1度同じ操作を行えば、3 が後ろから3番目になります。
このようにして、最終的に、[1, 2, 3, 4, 5] というリストを得ることができます。

1-2. 反省
---------------

この方法で、何回要素を比較しないといけないか考えてみます。
1つの要素を後ろに持っていくのに、上の a-d の4回必要でした。
今、要素は 1~5 の5つあるので、リストを並べ終えるまでに、4*5=20回も要素を比較する必要があります。

もし、もっと大きなリストを考えていた場合、
サイズ N のリストに対して、 a-d に対応する操作は、 N-1 回必要で、
要素が N 個あるので、 N*(N-1) 回も要素を比較しなければなりません。



1. アルゴリズムの概要
-------------------------


